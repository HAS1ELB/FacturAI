#!/usr/bin/env python3
"""
Script d'installation des d√©pendances pour le module VLM FacturAI
"""

import subprocess
import sys
import os
import importlib

def check_python_version():
    """V√©rifie la version de Python"""
    if sys.version_info < (3, 8):
        print("‚ùå Python 3.8 ou sup√©rieur requis")
        return False
    print(f"‚úÖ Python {sys.version.split()[0]} d√©tect√©")
    return True

def install_package(package, description=""):
    """Installe un package avec pip"""
    try:
        print(f"üì¶ Installation de {package}... {description}")
        subprocess.check_call([sys.executable, "-m", "pip", "install", package])
        print(f"‚úÖ {package} install√© avec succ√®s")
        return True
    except subprocess.CalledProcessError:
        print(f"‚ùå Erreur lors de l'installation de {package}")
        return False

def check_package(package_name, import_name=None):
    """V√©rifie si un package est install√©"""
    if import_name is None:
        import_name = package_name
    
    try:
        importlib.import_module(import_name)
        print(f"‚úÖ {package_name} est disponible")
        return True
    except ImportError:
        print(f"‚ùå {package_name} n'est pas install√©")
        return False

def install_basic_dependencies():
    """Installe les d√©pendances de base"""
    print("\nüîß Installation des d√©pendances de base...")
    
    basic_packages = [
        ("torch", "Framework PyTorch pour l'IA"),
        ("torchvision", "Utilitaires vision pour PyTorch"),
        ("transformers", "Biblioth√®que Hugging Face Transformers"),
        ("pillow", "Traitement d'images Python"),
        ("opencv-python", "Computer Vision OpenCV"),
        ("numpy", "Calculs num√©riques"),
        ("matplotlib", "Visualisations graphiques"),
        ("pandas", "Manipulation de donn√©es"),
    ]
    
    success_count = 0
    for package, description in basic_packages:
        if install_package(package, description):
            success_count += 1
    
    print(f"\nüìä {success_count}/{len(basic_packages)} d√©pendances de base install√©es")
    return success_count == len(basic_packages)

def install_vlm_models():
    """Installe les d√©pendances sp√©cifiques aux mod√®les VLM"""
    print("\nü§ñ Installation des d√©pendances pour les mod√®les VLM...")
    
    vlm_packages = [
        ("accelerate", "Acc√©l√©ration d'entra√Ænement Hugging Face"),
        ("sentencepiece", "Tokenisation pour certains mod√®les"),
        ("protobuf", "S√©rialisation de donn√©es"),
        ("bitsandbytes", "Optimisation m√©moire (optionnel)"),
        ("transformers_stream_generator", "Support pour Qwen-VL (optionnel)"),
    ]
    
    success_count = 0
    for package, description in vlm_packages:
        print(f"\nüì¶ {package}: {description}")
        if package == "transformers_stream_generator":
            # Package optionnel pour Qwen-VL
            print("  (Optionnel pour Qwen-VL)")
            try:
                if install_package(package):
                    success_count += 1
            except:
                print(f"  ‚ö†Ô∏è  {package} non install√© (optionnel)")
        elif package == "bitsandbytes":
            # Package optionnel pour l'optimisation
            print("  (Optionnel pour l'optimisation m√©moire)")
            try:
                if install_package(package):
                    success_count += 1
            except:
                print(f"  ‚ö†Ô∏è  {package} non install√© (optionnel)")
        else:
            if install_package(package, description):
                success_count += 1
    
    print(f"\nüìä {success_count}/{len(vlm_packages)} d√©pendances VLM install√©es")
    return True  # Certaines sont optionnelles

def verify_installation():
    """V√©rifie l'installation en testant les imports"""
    print("\nüîç V√©rification de l'installation...")
    
    # Packages essentiels
    essential_packages = [
        ("torch", "torch"),
        ("torchvision", "torchvision"),
        ("transformers", "transformers"),
        ("PIL", "PIL"),
        ("cv2", "cv2"),
        ("numpy", "numpy"),
        ("matplotlib", "matplotlib"),
    ]
    
    all_good = True
    for package_name, import_name in essential_packages:
        if not check_package(package_name, import_name):
            all_good = False
    
    # Test sp√©cifique pour les mod√®les VLM
    print("\nü§ñ Test des mod√®les VLM disponibles...")
    
    vlm_models = [
        ("BLIP-2", "transformers", "Blip2Processor"),
        ("LLaVA", "transformers", "LlavaNextProcessor"),
    ]
    
    for model_name, module_name, class_name in vlm_models:
        try:
            module = importlib.import_module(module_name)
            getattr(module, class_name)
            print(f"‚úÖ Support {model_name} disponible")
        except (ImportError, AttributeError):
            print(f"‚ö†Ô∏è  Support {model_name} non disponible")
    
    return all_good

def test_vlm_module():
    """Test rapide du module VLM"""
    print("\nüß™ Test du module VLM...")
    
    try:
        # Ajouter le chemin parent pour importer le module
        current_dir = os.path.dirname(os.path.abspath(__file__))
        parent_dir = os.path.dirname(current_dir)
        if parent_dir not in sys.path:
            sys.path.insert(0, parent_dir)
        
        # Test d'importation
        from vlm import VLMProcessor
        from vlm.config import vlm_config
        
        print("‚úÖ Module VLM import√© avec succ√®s")
        
        # Test d'initialisation
        processor = VLMProcessor()
        available_models = processor.available_models
        
        print(f"‚úÖ Processeur VLM initialis√©")
        print(f"üìã Mod√®les disponibles: {available_models}")
        
        if available_models:
            print("üéâ Module VLM pr√™t √† l'utilisation!")
        else:
            print("‚ö†Ô∏è  Aucun mod√®le VLM disponible (utilisation en mode factice)")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test du module VLM: {e}")
        return False

def main():
    """Fonction principale d'installation"""
    print("=" * 60)
    print("üöÄ INSTALLATION DU MODULE VLM FACTURAI")
    print("=" * 60)
    
    # V√©rification de Python
    if not check_python_version():
        return 1
    
    # Installation des d√©pendances
    success = True
    
    if not install_basic_dependencies():
        print("‚ö†Ô∏è  Certaines d√©pendances de base ont √©chou√©")
        success = False
    
    if not install_vlm_models():
        print("‚ö†Ô∏è  Certaines d√©pendances VLM ont √©chou√©")
        # Ne pas marquer comme √©chec car certaines sont optionnelles
    
    # V√©rification
    if not verify_installation():
        print("‚ö†Ô∏è  Probl√®mes d√©tect√©s lors de la v√©rification")
        success = False
    
    # Test du module
    if not test_vlm_module():
        print("‚ö†Ô∏è  Le module VLM n'est pas totalement fonctionnel")
        success = False
    
    # R√©sum√© final
    print("\n" + "=" * 60)
    print("üìã R√âSUM√â DE L'INSTALLATION")
    print("=" * 60)
    
    if success:
        print("üéâ Installation r√©ussie!")
        print("\nPour utiliser le module VLM:")
        print("1. cd FacturAI/vlm")
        print("2. python quick_test.py")
        print("3. python examples/basic_usage.py")
        
        print("\nDocumentation:")
        print("- README.md : Guide d'utilisation")
        print("- examples/ : Exemples d'utilisation")
        print("- tests/ : Tests unitaires")
        
        return 0
    else:
        print("‚ö†Ô∏è  Installation partiellement r√©ussie")
        print("Consultez les erreurs ci-dessus pour r√©soudre les probl√®mes.")
        return 1

if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)